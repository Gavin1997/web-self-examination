(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{267:function(a,t,r){"use strict";r.r(t);var s=r(38),e=Object(s.a)({},function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"编译原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#编译原理","aria-hidden":"true"}},[a._v("#")]),a._v(" 编译原理")]),a._v(" "),r("h2",{attrs:{id:"_1-理解代码到底是什么，计算机如何将代码转换为可以运行的目标程序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-理解代码到底是什么，计算机如何将代码转换为可以运行的目标程序","aria-hidden":"true"}},[a._v("#")]),a._v(" 1. 理解代码到底是什么，计算机如何将代码转换为可以运行的目标程序")]),a._v(" "),r("h2",{attrs:{id:"_2-正则表达式的匹配原理和性能优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-正则表达式的匹配原理和性能优化","aria-hidden":"true"}},[a._v("#")]),a._v(" 2. 正则表达式的匹配原理和性能优化")]),a._v(" "),r("h2",{attrs:{id:"_3-如何将-javascript-代码解析成抽象语法树-ast"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何将-javascript-代码解析成抽象语法树-ast","aria-hidden":"true"}},[a._v("#")]),a._v(" 3. 如何将 JavaScript 代码解析成抽象语法树(AST)")]),a._v(" "),r("h2",{attrs:{id:"_4-base64-的编码原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-base64-的编码原理","aria-hidden":"true"}},[a._v("#")]),a._v(" 4. base64 的编码原理")]),a._v(" "),r("h2",{attrs:{id:"_5-几种进制的相互转换计算方法，在-javascript-中如何表示和转换"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-几种进制的相互转换计算方法，在-javascript-中如何表示和转换","aria-hidden":"true"}},[a._v("#")]),a._v(" 5. 几种进制的相互转换计算方法，在 JavaScript 中如何表示和转换")])])},[],!1,null,null,null);t.default=e.exports}}]);